/// @file
/// @brief To reproduce a bug about connection lost
/// @copyright
///   2025 Mitsutoshi Nakano
///   SPDX-License-Identifier: AGPL-3.0
/// @author Mitsutoshi Nakano <ItSANgo@gmail.com>
/// @version 0.1.0

#include <err.h>
#include <getopt.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/types.h>
#include <sysexits.h>

#include "ini.h"
#include "list.h"

#if __has_c_attribute(noreturn)
#define NORETURN [[noreturn]]
#else
#define NORETURN
#endif // __has_c_attribute(noreturn)

#define MSG_SIZE 1024

NORETURN static void
dump_sqlca(int status)
{
    errx(
        status,
        "sqlcode: %ld sqlstate: %5s, sqlerrml: %d\n"
        "sqlerrd: %ld %ld %ld %ld %ld %ld, sqlwarn: %d %d %d %d %d %d %d %d\n"
        "errm: %s\n",
        sqlca.sqlcode, sqlca.sqlstate, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrd[0],
        sqlca.sqlerrd[1], sqlca.sqlerrd[2], sqlca.sqlerrd[3], sqlca.sqlerrd[4],
        sqlca.sqlerrd[5], sqlca.sqlwarn[0], sqlca.sqlwarn[1], sqlca.sqlwarn[2],
        sqlca.sqlwarn[3], sqlca.sqlwarn[4], sqlca.sqlwarn[5], sqlca.sqlwarn[6],
        sqlca.sqlwarn[7], sqlca.sqlerrm.sqlerrmc
    );
}

NORETURN static void
usage(int status, const char *progname)
{
    fprintf(
        status ? stderr : stdout,
        "Usage: %s [options]\n"
        "Options:\n"
        "  -c, --conf FILE  Specify the configuration file\n"
        "  -h, --help       Show this help message\n"
        "  -V, --version    Show version information\n",
        progname
    );
    exit(status);
}

NORETURN int
main(int argc, char *argv[])
{
    static struct option long_options[] = {
        {"conf", required_argument, NULL, 'c'},
        {"help", no_argument, NULL, 'h'},
        {"version", no_argument, NULL, 'V'},
        {NULL, 0, NULL, 0}
    };
    const char *conf_file = "wait_msg.ini";
    for (int c;
         (c = getopt_long(argc, argv, "c:hV", long_options, NULL)) != -1;) {
        switch (c) {
        case 'c':
            conf_file = optarg;
            break;
        case 'h':
            usage(EX_OK, argv[0]);
        case 'V':
            printf("Version: 0.1.0-SNAPSHOT\n");
            exit(0);
        default:
            fprintf(stderr, "Unknown option: %c\n", c);
            usage(EX_USAGE, argv[0]);
        }
    }

    FILE *fp = fopen(conf_file, "r");
    if (fp == NULL) {
        err(EX_CONFIG, "the configuration file %s:", conf_file);
    }
    struct list *ini_list = load_ini(fp);
    if (ini_list == NULL) {
        err(EX_IOERR, "failed to load the configuration file");
    }
    if (fclose(fp)) {
        warn("failed to fclose the configuration file");
    }

    EXEC SQL WHENEVER SQLERROR GOTO sql_error;

    const char *keys[] = {CONNECTION, USER, PASSWORD, KEY, NULL};
    enum { E_CONNECTION, E_USER, E_PASSWORD, E_KEY, E_SIZE };
    EXEC SQL BEGIN DECLARE SECTION;
    const char *values[E_SIZE];
    EXEC SQL END DECLARE SECTION;

    for (int i = 0; keys[i] != NULL; i++) {
        if ((values[i] = get_value(ini_list, keys[i])) == NULL) {
            errx(
                EX_CONFIG, "%s was not found in the configuration file %s",
                keys[i], conf_file
            );
        }
    }

    int msg_key = strtoull(values[E_KEY], NULL, 16);

    // clang-format off
    EXEC SQL CONNECT TO :values[E_CONNECTION]
    USER :values[E_USER] USING :values[E_PASSWORD];
    // clang-format on

    int msgid = msgget(msg_key, IPC_CREAT | 0600);
    if (msgid < 0) {
        err(EX_OSERR, "msgget");
    }
    struct msgbuf {
        long mtype;
        char mtext[MSG_SIZE];
    } msg;
    while (msgrcv(msgid, &msg, MSG_SIZE, 0, 0) >= 0) {
        EXEC SQL BEGIN DECLARE SECTION;
        int i;
        EXEC SQL END DECLARE SECTION;

        // clang-format off
        EXEC SQL SELECT 1 INTO :i;
        // clang-format on

        printf("%d\n", i);
    }
    err(EX_OSERR, "msgrcv");

sql_error:
    dump_sqlca(EX_UNAVAILABLE);
}
